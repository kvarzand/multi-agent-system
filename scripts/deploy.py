#!/usr/bin/env python3
"""
Deployment script for Multi-Agent System
"""
import argparse
import subprocess
import sys
import json
import os
from pathlib import Path
from typing import List, Dict, Any


def run_command(command: List[str], cwd: str = None) -> subprocess.CompletedProcess:
    """Run a command and return the result"""
    print(f"Running: {' '.join(command)}")
    if cwd:
        print(f"Working directory: {cwd}")
    
    result = subprocess.run(
        command,
        cwd=cwd,
        capture_output=True,
        text=True
    )
    
    if result.returncode != 0:
        print(f"Error running command: {' '.join(command)}")
        print(f"stdout: {result.stdout}")
        print(f"stderr: {result.stderr}")
        sys.exit(1)
    
    return result


def check_prerequisites():
    """Check if all prerequisites are installed"""
    print("Checking prerequisites...")
    
    # Check Python version
    if sys.version_info < (3, 11):
        print("Error: Python 3.11 or higher is required")
        sys.exit(1)
    
    # Check AWS CLI
    try:
        run_command(["aws", "--version"])
    except FileNotFoundError:
        print("Error: AWS CLI is not installed")
        sys.exit(1)
    
    # Check CDK CLI
    try:
        run_command(["cdk", "--version"])
    except FileNotFoundError:
        print("Error: AWS CDK CLI is not installed")
        print("Install with: npm install -g aws-cdk")
        sys.exit(1)
    
    print("Prerequisites check passed!")


def install_dependencies():
    """Install Python dependencies"""
    print("Installing Python dependencies...")
    
    # Install main dependencies
    run_command([sys.executable, "-m", "pip", "install", "-e", ".[dev]"])
    
    # Install CDK dependencies
    cdk_dir = Path("infrastructure/cdk")
    if cdk_dir.exists():
        run_command([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                   cwd=str(cdk_dir))
    
    print("Dependencies installed successfully!")


def bootstrap_cdk(region: str = "us-east-1"):
    """Bootstrap CDK in the specified region"""
    print(f"Bootstrapping CDK in region {region}...")
    
    cdk_dir = Path("infrastructure/cdk")
    run_command(["cdk", "bootstrap", f"--region={region}"], cwd=str(cdk_dir))
    
    print("CDK bootstrap completed!")


def deploy_stacks(stacks: List[str] = None, region: str = "us-east-1", 
                 divisions: List[str] = None):
    """Deploy CDK stacks"""
    print("Deploying CDK stacks...")
    
    cdk_dir = Path("infrastructure/cdk")
    
    # Set context variables
    context_args = [
        f"--context", f"region={region}",
    ]
    
    if divisions:
        context_args.extend([
            "--context", f"divisions={json.dumps(divisions)}"
        ])
    
    # Deploy stacks
    if stacks:
        for stack in stacks:
            print(f"Deploying stack: {stack}")
            run_command([
                "cdk", "deploy", stack,
                "--require-approval", "never",
                *context_args
            ], cwd=str(cdk_dir))
    else:
        print("Deploying all stacks...")
        run_command([
            "cdk", "deploy", "--all",
            "--require-approval", "never",
            *context_args
        ], cwd=str(cdk_dir))
    
    print("Stack deployment completed!")


def get_stack_outputs(region: str = "us-east-1") -> Dict[str, Any]:
    """Get outputs from deployed stacks"""
    print("Retrieving stack outputs...")
    
    # This would typically use boto3 to get CloudFormation stack outputs
    # For now, we'll return a placeholder
    return {
        "enterprise_registry_table": "enterprise-agent-registry",
        "tool_registry_table": "tool-registry",
        "event_bus_name": "multi-agent-communication"
    }


def create_env_file(outputs: Dict[str, Any], divisions: List[str]):
    """Create environment file with deployment outputs"""
    print("Creating environment configuration...")
    
    env_content = f"""# Multi-Agent System Environment Configuration
# Generated by deployment script

# AWS Configuration
AWS_REGION=us-east-1

# Database Configuration
ENTERPRISE_REGISTRY_TABLE={outputs.get('enterprise_registry_table', 'enterprise-agent-registry')}
TOOL_REGISTRY_TABLE={outputs.get('tool_registry_table', 'tool-registry')}
TOOL_EXECUTION_TABLE={outputs.get('tool_execution_table', 'tool-executions')}

# EventBridge Configuration
EVENT_BUS_NAME={outputs.get('event_bus_name', 'multi-agent-communication')}

# Monitoring Configuration
METRICS_NAMESPACE=MultiAgentSystem
LOG_LEVEL=INFO
ENABLE_XRAY_TRACING=true

# Security Configuration
ENABLE_ENCRYPTION=true
ENABLE_AUDIT_LOGGING=true

# System Configuration
ENVIRONMENT=production
MESSAGE_TTL_SECONDS=3600
MAX_RETRY_ATTEMPTS=3
DEFAULT_TOOL_TIMEOUT=300
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print("Environment configuration created: .env")


def main():
    """Main deployment function"""
    parser = argparse.ArgumentParser(description="Deploy Multi-Agent System")
    parser.add_argument("--region", default="us-east-1", help="AWS region")
    parser.add_argument("--divisions", nargs="+", default=["division-a", "division-b"],
                       help="Division IDs to deploy")
    parser.add_argument("--stacks", nargs="+", help="Specific stacks to deploy")
    parser.add_argument("--skip-bootstrap", action="store_true", 
                       help="Skip CDK bootstrap")
    parser.add_argument("--skip-deps", action="store_true",
                       help="Skip dependency installation")
    parser.add_argument("--skip-deploy", action="store_true",
                       help="Skip stack deployment")
    
    args = parser.parse_args()
    
    print("Starting Multi-Agent System deployment...")
    print(f"Region: {args.region}")
    print(f"Divisions: {args.divisions}")
    
    # Check prerequisites
    check_prerequisites()
    
    # Install dependencies
    if not args.skip_deps:
        install_dependencies()
    
    # Bootstrap CDK
    if not args.skip_bootstrap:
        bootstrap_cdk(args.region)
    
    # Deploy stacks
    if not args.skip_deploy:
        deploy_stacks(args.stacks, args.region, args.divisions)
        
        # Get outputs and create env file
        outputs = get_stack_outputs(args.region)
        create_env_file(outputs, args.divisions)
    
    print("\nDeployment completed successfully!")
    print("\nNext steps:")
    print("1. Configure Bedrock Gateways through AWS Console")
    print("2. Create and deploy Bedrock Agents")
    print("3. Set up knowledge bases and action groups")
    print("4. Test cross-division communication")


if __name__ == "__main__":
    main()